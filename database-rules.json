{
  "rules": {
    "users": {
      "$uid": {
        ".read": "$uid === auth.uid",
        ".write": "$uid === auth.uid",
        
        "profile": {
          ".read": "$uid === auth.uid",
          ".write": "$uid === auth.uid",
          
          "email": {
            ".validate": "newData.isString() && newData.val().matches(/^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$/)"
          },
          "creationDate": {
            ".validate": "newData.isString() && newData.val().matches(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/)"
          },
          "lastActive": {
            ".validate": "newData.isString() && newData.val().matches(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/)"
          }
        },
        
        "entries": {
          ".indexOn": [".key"],
          
          "$date": {
            ".read": "$uid === auth.uid",
            ".write": "$uid === auth.uid",
            ".validate": "newData.parent().parent().parent().child('auth/uid').val() === $uid || $uid === auth.uid",
            
            "$time": {
              ".validate": "newData.hasChildren(['title']) && $time.matches(/^([01]\\d|2[0-3]):([0-5]\\d)$/)",
              
              "title": {
                ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 100"
              },
              "description": {
                ".validate": "newData.isString() || newData.val() === null"
              },
              "mood": {
                ".validate": "newData.isString() || newData.val() === null"
              },
              "tags": {
                ".validate": "newData.isArray() || newData.val() === null",
                "$tagIndex": {
                  ".validate": "newData.isString() && newData.val().startsWith('#') && newData.val().length <= 30"
                }
              },
              "createdAt": {
                ".validate": "newData.isString() && newData.val().matches(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/)"
              },
              "updatedAt": {
                ".validate": "newData.isString() && newData.val().matches(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/)"
              }
            }
          }
        },
        
        "settings": {
          ".read": "$uid === auth.uid",
          ".write": "$uid === auth.uid",
          
          "theme": {
            ".validate": "newData.isString() && (newData.val() === 'light' || newData.val() === 'dark')"
          },
          "defaultView": {
            ".validate": "newData.isString() && (newData.val() === 'timeline' || newData.val() === 'calendar')"
          },
          "notifications": {
            ".validate": "newData.isBoolean()"
          }
        },
        
        "stats": {
          ".read": "$uid === auth.uid",
          ".write": "$uid === auth.uid",
          
          "totalEntries": {
            ".validate": "newData.isNumber() && newData.val() >= 0"
          },
          "daysWithEntries": {
            ".validate": "newData.isNumber() && newData.val() >= 0"
          },
          "mostCommonMood": {
            ".validate": "newData.isString()"
          },
          "mostUsedTags": {
            ".validate": "newData.isArray()",
            "$tagIndex": {
              ".validate": "newData.hasChildren(['tag', 'count'])",
              "tag": {
                ".validate": "newData.isString()"
              },
              "count": {
                ".validate": "newData.isNumber() && newData.val() > 0"
              }
            }
          }
        }
      }
    },
    
    ".read": false,
    ".write": false
  }
}
